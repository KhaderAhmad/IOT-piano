/***************************************************************************************************************************************************/
/*                                                    includes and defines                                                                         */
/***************************************************************************************************************************************************/

#include <WiFi.h>
#include <HTTPClient.h>
#include <Wire.h>
#include <Arduino.h>
#include <string.h>
#include "Adafruit_MPR121.h"
#include <Adafruit_NeoPixel.h>
#include "driver/i2s.h"
#include <math.h>
#include "set.h"


// Defines
#define I2S_WS 25   // LRC pin
#define I2S_SD 23   // DIN pin
#define I2S_SCK 26  // BCLK pin
#define SAMPLE_RATE 44100
// Which pin on the Arduino is connected to the NeoPixels?
#define Neo_pin 18  // On Trinket or Gemma, suggest changing this to 1
//red for 3v3
//white for gnd
//green for 18

// How many NeoPixels are attached to the Arduino?
#define NUMPIXELS 11  // Popular NeoPixel ring size

#define StartButton 14
#define ExitButton 12



#ifndef _BV
#define _BV(bit) (1 << (bit))
#endif

#ifdef __AVR__
#include <avr/power.h>  // Required for 16 MHz Adafruit Trinket
#endif

// VCC: Connect to 3.3V on the ESP32.
// GND: Connect to GND on the ESP32.
// SDA: Connect to GPIO 21 (I2C data line) on the ESP32.
// SCL: Connect to GPIO 22 (I2C clock line) on the ESP32.
// IRQ: Not necessary for basic functionality but can be connected to an interrupt pin on the ESP32 if needed for advanced features.



/***************************************************************************************************************************************************/
/*                                                         WIFI CONNECTION                                                                         */
/***************************************************************************************************************************************************/

// WiFi and Firebase setup
#include <ESP32Firebase.h>
#define _SSID "ICST"            // Your WiFi SSID
#define _PASSWORD "arduino123"  // Your WiFi Password
//#define REFERENCE_URL "https://ass2-cb1cb-default-rtdb.firebaseio.com/"
#define REFERENCE_URL "https://iot-piano-default-rtdb.firebaseio.com/"
#define FIREBASE_AUTH "AIzaSyB1GPXvfeC1zr0cQ_-go7AmLtPTyiZrPR0"

Firebase firebase(REFERENCE_URL);

void firebaseSetup() {
  Serial.println("Connecting to WIFI: Pending...");
  WiFi.mode(WIFI_STA);
  WiFi.disconnect();
  delay(1000);
  WiFi.begin(_SSID, _PASSWORD);

  while (WiFi.status() != WL_CONNECTED) {
    freeplay();
    delay(10);
    Serial.print("-");
  }
  Serial.println("Connected to WIFI");
}


String firebaseReadSong() {
  String songStr = "/currentSong";

  String song = firebase.getString(songStr);
  Serial.print("Song is:");
  Serial.println(song);
  return song;
}


String firebaseReadSongDuration() {
  String durStr = "/duration";
  String song = firebase.getString(durStr);
  Serial.print("duration is:");
  Serial.println(song);
  return song;
}

String firebaseReadChallenge() {
  String songStr = "/challenge";

  String song = firebase.getString(songStr);
  Serial.print("Song is:");
  Serial.println(song);
  return song;
}



/***************************************************************************************************************************************************/
/*                                                           MPR121 setup                                                                          */
/***************************************************************************************************************************************************/


// MPR121 setup
Adafruit_MPR121 cap = Adafruit_MPR121();
uint16_t lasttouched = 0;
uint16_t currtouched = 0;

void mprSetup() {
  Serial.println("Adafruit MPR121 Capacitive Touch sensor test");
  if (!cap.begin(0x5A)) {
    Serial.println("MPR121 not found, check wiring?");
    while (1)
      ;
  }
  Serial.println("MPR121 found!");
}



/***************************************************************************************************************************************************/
/*                                                         Neo_PIXEL Setup                                                                         */
/***************************************************************************************************************************************************/


Adafruit_NeoPixel pixels(NUMPIXELS, Neo_pin, NEO_GRB + NEO_KHZ800);

void Neo_setup() {
  Serial.println("aetiing neo_pixel");
}

/***************************************************************************************************************************************************/
/*                                                           light functions                                                                       */
/***************************************************************************************************************************************************/

void lightByNum(int led_num) {

  if (led_num < 0) {
    pixels.clear();  // Set all pixel colors to 'off'
  } else {
    pixels.setPixelColor(led_num, pixels.Color(150, 0, 0));
  }
}

void lightNextByNum(int led_num) {

  if (led_num < 0) {
    pixels.clear();  // Set all pixel colors to 'off'
  } else {
    pixels.setPixelColor(led_num, pixels.Color(255, 255, 0));
  }
}


void turnOffByNum(int led_num) {

  if (led_num < 0) {
    pixels.clear();  // Set all pixel colors to 'off'
  } else {
    pixels.setPixelColor(led_num, pixels.Color(0, 150, 0));
  }
}


void lightByChar(char note) {
  int led_num = getNumForChar(note);
  if (led_num < 0) {
    pixels.clear();  // Set all pixel colors to 'off'
  } else {
    pixels.setPixelColor(led_num, pixels.Color(150, 0, 0));
  }
}



/***************************************************************************************************************************************************/
/*                                                         DAC Amplifier setup                                                                     */
/***************************************************************************************************************************************************/

unsigned int delayForNextNote = 0;
unsigned int del = 5000;


// DAC Amplifier setup
size_t bytes_written;
const int sample_count = 256;  // Adjust sample count if needed
//int16_t samples[sample_count];
//int16_t* samples;

#define AT 261.63
#define BT 293.66
#define CT 329.63
#define DT 349.23
#define ET 392.00
#define FT 440.00
#define GT 493.88
#define HT 523.25
#define IT 552.37
#define JT 581.55
#define NO 0
#define I2S_PORT I2S_NUM_0


void dacSetup() {
  // I2S configuration
  i2s_config_t i2s_config = {
    .mode = (i2s_mode_t)(I2S_MODE_MASTER | I2S_MODE_TX),
    .sample_rate = SAMPLE_RATE,
    .bits_per_sample = I2S_BITS_PER_SAMPLE_16BIT,
    .channel_format = I2S_CHANNEL_FMT_ONLY_LEFT,
    .communication_format = I2S_COMM_FORMAT_I2S_MSB,
    .intr_alloc_flags = ESP_INTR_FLAG_LEVEL1,
    .dma_buf_count = 8,
    .dma_buf_len = 64,
    .use_apll = false,
    .tx_desc_auto_clear = true,
    .fixed_mclk = 0
  };

  // I2S pin configuration
  i2s_pin_config_t pin_config = {
    .bck_io_num = 26,    // Bit Clock (BCK)
    .ws_io_num = 25,     // Word Select (WS)
    .data_out_num = 23,  // Data Out (DOUT)
    .data_in_num = I2S_PIN_NO_CHANGE
  };

  // Install and start I2S driver
  i2s_driver_install(I2S_PORT, &i2s_config, 0, NULL);
  i2s_set_pin(I2S_PORT, &pin_config);
  i2s_zero_dma_buffer(I2S_PORT);
}


/***************************************************************************************************************************************************/
/*                                                           sound functions                                                                       */
/***************************************************************************************************************************************************/


void playTone(float frequency) {
  if (frequency == 0) return;
  const int sampleCount = SAMPLE_RATE / frequency;
  int16_t samples[sampleCount];
  for (int i = 0; i < sampleCount; i++) {
    float sample = sin(2 * PI * frequency * i / SAMPLE_RATE);
    samples[i] = (int16_t)(sample * 32767);
  }
  size_t bytesWritten;
  for (int i = 0; i < (SAMPLE_RATE / sampleCount)/4 ; i++) {
    i2s_write(I2S_PORT, samples, sampleCount * sizeof(int16_t), &bytesWritten, portMAX_DELAY);
  }
}


float getFreqForChar(char note) {
  float freq = 0.0;
  switch (note) {
    case 'A': freq = AT; break;  // Do
    case 'B': freq = BT; break;  // Re
    case 'C': freq = CT; break;  // Mi
    case 'D': freq = DT; break;  // Fa
    case 'E': freq = ET; break;  // Sol
    case 'F': freq = FT; break;  // La
    case 'G': freq = GT; break;  // Ti
    case 'H': freq = HT; break;
    case 'I': freq = IT; break;  // Ti
    case 'J': freq = JT; break;  // Do (higher octave)
    default: freq = NO; break;   // Silence
  }
  return freq;
}

int getNumForChar(char note) {
  switch (note) {
    case 'A': return 0;
    case 'B': return 1;
    case 'C': return 2;
    case 'D': return 3;
    case 'E': return 4;
    case 'F': return 5;
    case 'G': return 6;
    case 'H': return 7;
    default: return -1;
  }
}

char getCharForNum(int note) {
  switch (note) {
    case 0: return 'A';
    case 1: return 'B';
    case 2: return 'C';
    case 3: return 'D';
    case 4: return 'E';
    case 5: return 'F';
    case 6: return 'G';
    case 7: return 'H';
    case 8: return 'I';
    case 9: return 'J';
    default: return '-1';
  }
}



void playSongByNum() {
  bool correct = true;
  //String song = "A,BC,D,E,F";
  //String dur = "1000,5000,1000,5000,1000";
  String song = firebaseReadSong();
  String dur = firebaseReadSongDuration();
  int num = 0;
  String strduration = "";
  int stop;
  for (int i = 0; i < song.length(); i++) {
    stop = digitalRead(ExitButton);
    if (stop < 1) {
      return;
    }
    char note = song[i];
    char noteNext = song[i + 1];
    if (note == ',') continue;
    strduration = "";

    if (noteNext != ',' && noteNext != NULL)  /// i am hve two notes AB
    {
      Serial.println(song[i]);
      Serial.println(song[i + 1]);

      lightByChar(noteNext);
      i++;
    }


    Serial.println(song[i]);
    while (dur[num] != ',' && dur[num] != NULL) {
      Serial.println("in while");
      strduration += dur[num];
      num++;
    }
    num++;
    int Notedur = strduration.toInt();

    lightByChar(note);  //// trun on
    pixels.show();
    char next1;
    char next2;
    String Next1 = "";
    String Next2 = "";
    if (noteNext != ',' && noteNext != NULL)  // i have to note like AB
    {
      next1 = (i >= (song.length() - 1)) ? (-1) : (song[i + 3]);
      Next1 += next1;
      next2 = (i >= (song.length() - 1)) ? (-1) : (song[i + 4]);
      if (next2 != ',') {
        Next2 += next2;
      }

    } else {
      next1 = (i >= (song.length() - 1)) ? (-1) : (song[i + 2]);
      Next1 += next1;
      next2 = (i >= (song.length() - 1)) ? (-1) : (song[i + 3]);
      if (next2 != ',') {
        Next2 += next2;
      }
    }
    delayForNextNote = millis();
    String strNote = "";
    if (noteNext != ',' && noteNext != NULL) {
      strNote += note;
      strNote += noteNext;
    } else {
      strNote += note;
    }

    correct = waitForTouchAndCheckIfCorrectTWOStrigs(strNote, Next1 + Next2, Notedur);
    pixels.clear();
    pixels.show();
    if (!correct) {

      return;
    }
  }
}

bool waitForTouchAndCheckIfCorrectTWOStrigs(String note, String next, uint16_t dur) {
  Serial.print("waiting for correct touch with note ");
  Serial.print(note);
  Serial.print(" and next ");
  Serial.print(next);
  Serial.print(" and duration ");
  Serial.println(dur);
  int stop = 1;

  currtouched = cap.touched();
  while (!currtouched && currtouched != lasttouched) {  /// waiting for any touch
    stop = digitalRead(ExitButton);
    //Serial.print(stop);
    if (stop < 1) {
      return false;
    }
    delay(50);
    pixels.show();
    currtouched = cap.touched();
    if (millis() - delayForNextNote >= del) {
      Serial.println("you suck kys");
      return false;
    }
  }
  while (currtouched == 0) {
    //return false;
    currtouched = cap.touched();
    stop = digitalRead(ExitButton);
    //Serial.print(stop);
    if (stop < 1) {
      return false;
    }
  }
  int lenNote = note.length();
  int lenNext = next.length();

  if (lenNote == 1) {
    for (uint8_t i = 0; i < 12; i++) {
      if ((currtouched & _BV(i))) {
        Serial.print(i);
        Serial.println(" touched");
        int correctNote1 = getNumForChar(note[0]);

        if (lenNext != 1) {
          while_touched_play_sound_for_learningUpdate(i, -1, getNumForChar(next[0]), getNumForChar(next[1]), dur, correctNote1, -1);
        }
        while_touched_play_sound_for_learningUpdate(i, -1, getNumForChar(next[0]), -1, dur, correctNote1, -1);
        if (i != correctNote1) {
          Serial.println("Incorrect note");
          return false;
        }
        // Reset lasttouched to allow detection of the same note again
        lasttouched = 0;
      }
    }
  }

  if (lenNote == 2) {
    Serial.println(" i am here i have two notes **********Two notes**************");
    for (uint8_t i = 0; i < 12; i++) {
      if ((currtouched & _BV(i))) {
        for (uint8_t j = 0; j < 12 && i != j; j++) {
          if ((currtouched & _BV(j))) {
            Serial.print(i);
            Serial.println(" touched");
            Serial.print(j);
            Serial.println(" touched");
            int correctNote1 = getNumForChar(note[0]);
            int correctNote2 = getNumForChar(note[1]);
            if (lenNext != 1) {
              while_touched_play_sound_for_learningUpdate(i, j, getNumForChar(next[0]), getNumForChar(next[1]), dur, correctNote1, correctNote2);
            }
            while_touched_play_sound_for_learningUpdate(i, j, getNumForChar(next[0]), -1, dur, correctNote1, correctNote2);
            if (!(((i == correctNote1) && (j == correctNote2)) || ((j == correctNote1) && (i == correctNote2)))) {
              Serial.println("Incorrect 2 note");
              return false;
            }
            // Reset lasttouched to allow detection of the same note again
            lasttouched = 0;
          }
        }
      }
    }
  }

  // Update lasttouched at the end of the loop
  lasttouched = currtouched;
  Serial.println("Correct note");
  return true;
}

void while_touched_play_sound_for_learningUpdate(int i, int j, int next1, int next2, uint16_t dur, int correctNote1, int correctNote2) {
  int green = 0;
  int red = 0;
  unsigned long startMillis = millis();

  if (i != -1 && j != -1)  /// that mean i have two notes
  {

    while (((cap.touched()) & _BV(i)) && ((cap.touched()) & _BV(j))) {
      unsigned long curMillis = millis() - startMillis;
      if ((((i == correctNote1) && (j == correctNote2)) || ((j == correctNote1) && (i == correctNote2)))) {
        if (curMillis >= dur) {
          Serial.println("oooh in if baby");
          turnOffByNum(i);
          turnOffByNum(j);
          if (next2 != -1) {
            lightByNum(next2);
          }
          lightByNum(next1);
        } else {
          green = (int)((float)((float)128 * (float)(millis() / (float)(dur + startMillis))));
          Serial.println(green);
          pixels.setPixelColor(i, pixels.Color(150 - green, green, 0));

          pixels.setPixelColor(j, pixels.Color(150 - green, green, 0));
          lightNextByNum(next1);
          if (next2 != -1) {
            lightNextByNum(next2);
          }
          //lightByNum(i);
          Serial.println("NOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO in if baby");
        }
      } else {
        //lightNextByNum(next);
        for (int i = 0; i < 12; i++) {
          pixels.setPixelColor(i, pixels.Color(0, 150, 0));
        }
        pixels.show();
        delay(50);
        pixels.clear();
        delay(50);
        for (int i = 0; i < 12; i++) {
          pixels.setPixelColor(i, pixels.Color(0, 130, 0));
        }
        pixels.show();
      }


      pixels.show();

      playTone(getFreq(i) + getFreq(j) / 3);
    }
  }


  if (i != -1 && j == -1) {
    Serial.println("i am here");
    while (((cap.touched()) & _BV(i))) {
      unsigned long curMillis = millis() - startMillis;
      if (i == correctNote1) {
        if (curMillis >= dur) {
          Serial.println("oooh in if baby");
          turnOffByNum(i);
          if (next2 != -1) {
            lightByNum(next2);
          }
          lightByNum(next1);
        } else {
          green = (int)((float)((float)128 * (float)(millis() / (float)(dur + startMillis))));
          Serial.println(green);
          pixels.setPixelColor(i, pixels.Color(150 - green, green, 0));
          if (next2 != -1) {
            lightNextByNum(next2);
          }
          lightNextByNum(next1);

          //lightByNum(i);
          Serial.println("NOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO in if baby");
        }
      } else {
        //lightNextByNum(next);
        for (int i = 0; i < 12; i++) {
          pixels.setPixelColor(i, pixels.Color(0, 150, 0));
        }
        pixels.show();
        delay(50);
        pixels.clear();
        delay(50);
        for (int i = 0; i < 12; i++) {
          pixels.setPixelColor(i, pixels.Color(0, 130, 0));
        }
        pixels.show();
      }


      pixels.show();
      playTone(getFreq(i));
    }
  }
}

/***************************************************************************************************************************************************/
/*                                                           freeplay functions                                                                       */
/***************************************************************************************************************************************************/

void while_touched_play_sound_for_freeplay(int i, int j) {



  //   if (i != -1 && j == -1) {
  //     while (((cap.touched()) & _BV(i))) {

  //       int temp = cap.touched();
  //       for (int itr = 0; itr < 12; itr++) {
  //         if ((temp & _BV(itr)) && itr != i) {
  //           Serial.println("lets get out 0");
  //           return;
  //         }
  //       }
  //       //Serial.println(" here play sound !");
  //       Serial.print("the i is *******");
  //       Serial.println(i);
  //       Serial.print("the j is *******");
  //       Serial.println(j);
  //       lightByNum(i);
  //       pixels.show();
  //       playTone(getFreq(i));
  //     }
  //   }
  //   if (j != -1 && i == -1) {
  //     while (((cap.touched()) & _BV(j))) {
  //       int temp = cap.touched();
  //       for (int itr = 0; itr < 12; itr++) {
  //         if ((temp & _BV(itr)) && itr != j) {
  //           Serial.println("lets get out 1");
  //           return;
  //         }
  //       }
  //       Serial.print("the i is *******");
  //       Serial.println(i);
  //       Serial.print("the j is *******");
  //       Serial.println(j);
  //       lightByNum(j);
  //       pixels.show();
  //       playTone(getFreq(j));
  //     }
  //   }
  //   if (i != -1 && j != -1) {
  //     while (((cap.touched()) & _BV(i)) && ((cap.touched()) & _BV(j))) {
  //       int temp = cap.touched();

  //       for (int itr = 0; itr < 12; itr++) {
  //         if (((itr != i) && (temp & _BV(itr))) && ((itr != j) && (temp & _BV(itr)))) {
  //           Serial.println(itr);
  //           Serial.println("lets get out 3");
  //           return;
  //         }
  //       }
  //       Serial.print("the i is *******");
  //       Serial.println(i);
  //       Serial.print("the j is *******");
  //       Serial.println(j);
  //       lightByNum(i);
  //       lightByNum(j);
  //       pixels.show();
  //       playTone(3 * (getFreq(i) + getFreq(j)) / 4);
  //     }
  //   }
}




float getFreq(int i) {
  switch (i) {
    case 0: return 261.63; break;    //DO
    case 1: return (293.66); break;  //RE
    case 2: return (329.63); break;  //MI
    case 3: return (349.23); break;  //FA
    case 4: return (392.00); break;  //SOL
    case 5: return (440.00); break;  //LA
    case 6: return (493.88); break;  //SI
    case 7: return (523.25); break;  // Do (higher octave)
    case 8: return (552.37); break;
    case 9: return (581.55); break;
    default: return (0.0); break;
  }
}



// void freeplay() {
//   Serial.println("in freeplay");


//   int firstNote = -1, secondNote = -1;
//   Serial.println(digitalRead(StartButton));
//   Serial.println(digitalRead(ExitButton));

//   while (true) {
//   int stop = digitalRead(ExitButton);
//   if(stop < 1)
//   {
//     return;
//   }
//     currtouched = cap.touched();
//     for (int i = 0; i < 10; i++) {
//       if ((currtouched & _BV(i)) && !(lasttouched & _BV(i)) && (currtouched!=4095)) {
//         Serial.println(firstNote);
//         if (firstNote == -1) {
//           Serial.print(i);
//           Serial.println(" touched");
//           lightByNum(i);
//           firstNote = i;
//           //while_touched_play_sound_for_freeplay(i,i);
//         } else {
//           Serial.print(i);
//           Serial.println(" double touch");
//           lightByNum(i);
//           secondNote = i;
//         }
//       }

//       if (!(currtouched & _BV(i)) && (lasttouched & _BV(i)) && (currtouched!=4095)) {
//         pixels.setPixelColor(i, pixels.Color(0, 0, 0));
//         Serial.print(i);
//         Serial.println(" released");
//         if (firstNote == i) {
//           firstNote = -1;
//         } else if (secondNote == i) {
//           secondNote = -1;
//         }
//       }
//     }

//     if (firstNote != -1 && secondNote == -1) {
//       Serial.println(" play 1");
//       while_touched_play_sound_for_freeplay(firstNote, secondNote);
//     } else if (firstNote != -1 && secondNote != -1) {
//       Serial.println(" play both");
//       while_touched_play_sound_for_freeplay(firstNote, secondNote);
//     } else if (firstNote == -1 && secondNote != -1) {
//       Serial.println(" play 2");
//       while_touched_play_sound_for_freeplay(firstNote, secondNote);
//     }



//     pixels.show();
//     lasttouched = currtouched;
//   }
// }
int touchedElectrodes[10];

void updateTouchedSet() {
  //uint16_t currtouched = cap.touched();
  Serial.println("in update*************************");
  // Clear the set to update with the current state

  for (int i = 0; i < 10; i++) {
    // Check if electrode 'i' is touched
    touchedElectrodes[i] = 0;
  }
  for (int i = 0; i < 10; i++) {
    // Check if electrode 'i' is touched
    if (currtouched & _BV(i) && currtouched!=1023 && currtouched!=4095) {
      Serial.println("adding i%%%%%%%%%%%%%%%%%%");
      touchedElectrodes[i] = 1;  // Add the touched electrode to the set
    }
  }
}

void freeplay() {
  Serial.println("in freeplay");

  currtouched = cap.touched();
   for (int i = 0; i < 10; i++) {
    // Check if electrode 'i' is touched
    touchedElectrodes[i] = 0;
  }

  while (true) {
    int stop = digitalRead(ExitButton);
    if (stop < 1) {
      return;
    }  
    lasttouched =currtouched;
    currtouched=cap.touched();

    
      updateTouchedSet();
      
    
    int total_frq = 0;
    Serial.println("Currently touched electrodes: ");
    //  Serial.println(touchedElectrodes.first());
    //    Serial.println(touchedElectrodes.next());
    //      Serial.println(touchedElectrodes.last());
    int count =1;
    for (int it = 0; it < 10; it++) {
      if(touchedElectrodes[it]==1)
      {
          Serial.print(it);
      total_frq += getFreq(it);
            count++;

      lightByNum(it);
      }
      
    }
    pixels.show();

    while (lasttouched == currtouched) {
      playTone((total_frq/count)*(2));
      lasttouched = currtouched;
      currtouched = cap.touched();
    }

    
    

     pixels.clear();
     pixels.show();
  }
}

// void learning(int songnum) {
//   playSongByNum(songnum);
// }



/***************************************************************************************************************************************************/
/*                                                                recording                                                                               */
/***************************************************************************************************************************************************/


void record() {

  String song = "";
  String dur = "";
  int firstNote = -1, secondNote = -1;
  int stop = 1;
  while (true) {
    stop = digitalRead(ExitButton);
    if (stop < 1) {
      break;
    }
    currtouched = cap.touched();
    for (int i = 0; i < 9; i++) {
      if ((currtouched & _BV(i)) && !(lasttouched & _BV(i))) {
        Serial.println(firstNote);
        if (firstNote == -1) {
          Serial.print(i);
          Serial.println(" touched");

          lightByNum(i);
          firstNote = i;
          //while_touched_play_sound_for_freeplay(i,i);
        } else {
          Serial.print(i);
          Serial.println(" double touch");
          lightByNum(i);
          secondNote = i;
          //song += getCharForNum(i);
        }
      }


      if (!(currtouched & _BV(i)) && (lasttouched & _BV(i))) {
        pixels.setPixelColor(i, pixels.Color(0, 0, 0));
        Serial.print(i);
        Serial.println(" released");
        if (firstNote == i) {
          firstNote = -1;
        } else if (secondNote == i) {
          secondNote = -1;
        }
      }
    }
    unsigned long startMillis = millis();
    if (firstNote != -1 && secondNote == -1) {

      Serial.println(" play 1");
      while_touched_play_sound_for_freeplay(firstNote, secondNote);

      unsigned long endMillis = millis();
      String temp = (String)(endMillis - startMillis);
      if (temp.toInt() >= 50) {
        dur += (temp + ",");


        song += (getCharForNum(firstNote));
        song += ",";
      }



    } else if (firstNote != -1 && secondNote != -1) {

      Serial.println(" play both");
      while_touched_play_sound_for_freeplay(firstNote, secondNote);


      unsigned long endMillis = millis();

      String temp = (String)(endMillis - startMillis);

      if (temp.toInt() >= 50) {
        dur += (temp + ",");

        song += getCharForNum(firstNote);
        song += getCharForNum(secondNote);
        song += ",";
      }


    } else if (firstNote == -1 && secondNote != -1) {
      Serial.println(" play 2");


      while_touched_play_sound_for_freeplay(firstNote, secondNote);
      unsigned long endMillis = millis();
      String temp = (String)(endMillis - startMillis);
      if (temp.toInt() >= 50) {


        dur += (temp + ",");
        song += (getCharForNum(secondNote));
        song += ",";
      }
    }
    Serial.print(" the song is *****");
    Serial.println(song);
    Serial.print(" the dur is***");
    Serial.println(dur);



    pixels.show();
    lasttouched = currtouched;
  }
  if (song != "") {
    firebase.setString("/recorded", song);
    firebase.setString("/duration", dur);
  }
}


/***************************************************************************************************************************************************/
/*                                                              setup                                                                              */
/***************************************************************************************************************************************************/
void setup() {
  Serial.begin(115200);
  while (!Serial) { delay(10); }
  mprSetup();
  delay(1000);
  dacSetup();
  delay(1000);
  Neo_setup();
  //   #if defined(__AVR_ATtiny85__) && (F_CPU == 16000000)
  // clock_prescale_set(clock_div_1);
  // #endif
  pixels.begin();
  delay(1000);
  firebaseSetup();
  pinMode(StartButton, INPUT_PULLUP);
  pinMode(ExitButton, INPUT_PULLUP);
}



/***************************************************************************************************************************************************/
/*                                                                loop                                                                             */
/***************************************************************************************************************************************************/


void loop() {
  //Serial.println("*************************starting from loop*********************************************************************");
  int start = digitalRead(StartButton);

  if (start < 1) {
    Serial.println("starting mode");
    String mode = "freePlay";
    String path = "/currentMode";
    mode = firebase.getString(path);

    if (mode == "freePlay") {
      freeplay();
      Serial.println("exit freeplay");
    } else if (mode == "learn") {
      String chal = firebaseReadChallenge();
      if (chal == "hard") {
        del = 2000;
      } else {
        del = 5000;
      }
      playSongByNum();
      //firebase.setString(path, "freePlay");
    } else if (mode == "record") {
      record();
      //firebase.setString(path, "freePlay");
    }
  }

  //freeplay();
  // pixels.show();
}
